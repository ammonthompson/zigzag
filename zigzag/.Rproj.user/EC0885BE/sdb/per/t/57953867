{
    "collab_server" : "",
    "contents" : "#INPUTS:\n#\t1:\tcontrol file\n#\t2:\tOutput file prefix\n#\t3:\tHow many randomly selected Yg values to output\n#\tGene length file is: ammon/expression_state_analysis/scripts/K562_mean_geneLength_grch38_gencode.v24.txt\n##########################\n\nfile_prefix = \"sim\"\nnum_yg = 1\ndf = read.table(\"sim_control_file.template.cf\",header = F, row.names = 1)\nsimulated_gene_lengths  = rlnorm(df$V2[5], log(2000), 0.5)\n\nparams = as.numeric(df[,1])\n\nnum_libs = params[4]\n\n#### Functions\nget_sigma2_g = function(gene){\n\n    sigma_x = exp(s0x + s1x * gene)\n\n    return(rlnorm(length(gene), log(sigma_x) + taux, sqrt(taux)))\n\n}\n#alt\n# get_sigma2_g = function(gene){\n#\n#   sigma_x = exp(s0x + s1x * gene) + 2\n#\n#   return(rlnorm(length(gene), log(sigma_x) + taux, sqrt(taux)))\n#\n# }\n\n\nget_p_x = function(gene, lib, gl){\n\n  return(1 - exp(-alpha_rx[lib] * gl * exp(gene)))\n\n}\n#alt\n# get_p_x = function(gene, lib, gl){\n#\n#   ppp = 1 - exp(-alpha_rx[lib] * gl * exp(gene))\n#\n#   ppp[sample(which(ppp < 0.5), 0.5 * length(which(ppp < 0.5)), replace = F)] = 1\n#\n#   return(ppp)\n#\n# }\n\nprior_settings_file = paste0(\"simulated_data/\", file_prefix, \".parameterValues\")\nwrite.table(matrix(c(\"sim_number\", \"mu_i\", \"variance_i\", \"spike_prob\", \"weight_active\",\n\t\"mu_a1\", \"mu_a2\", \"variance_a1\", \"variance_a2\", \"w_a1\", \"w_a2\", \"tau\", \"s0\", \"s1\",\n\tpaste0(rep(\"alpha_r\", num_libs), seq(num_libs))), nrow = 1),\n\tfile = prior_settings_file, sep = \"\\t\", quote = FALSE, col.names = FALSE, row.names = FALSE)\n\nnum_transcripts = params[5]\ngene_names = paste0(\"gene_\", seq(num_transcripts))\n\n### Generate sims\nfor(i in seq(params[17])){\n\n\t#sample random genes to record Yg values. Store in list for zigzag input as goi\n\tgoi = gene_names[sample(seq(num_transcripts), num_yg, replace = FALSE)]\n\twrite.table(gene_names[which(gene_names %in% goi)], file = paste0(\"simulated_data/\", \"sim\", i,\"_goi.txt\"), row.names = FALSE,\n                col.names = FALSE, sep = \"\\t\", quote = FALSE)\n\n\n\t#### spike and weights\n\ttotal = params[5]\n\tsim_gl = sample(simulated_gene_lengths, total)\n\tsim_rel_gl = sim_gl/mean(sim_gl)\n\n\tweight_active =  params[13]\n\tif(is.na(params[13])) weight_active =  rbeta(1, 10, 10)\n\n\tweight_within_active = params[14:15]\n\tif(is.na(params[14]) | is.na(params[15])){weight_within_active[1] = rbeta(1, 10, 2); weight_within_active[2] = 1 - weight_within_active[1]}\n\n\tspike_prob =  params[16]\n\tif(is.na(params[16])) spike_prob = rbeta(1, 2, 8)\n\n\tnum_inactive = floor((1 - weight_active) * total) + rbinom(1, 1, (1 - weight_active) * total - floor((1 - weight_active) * total))\n\n        num_spike = floor(spike_prob * num_inactive) + rbinom(1, 1, spike_prob * num_inactive - floor(spike_prob * num_inactive))\n\n\t#### sigma_x\n\ttaux = params[1]; if(is.na(taux)) taux = rgamma(1, 4, 40)\n\ts0x = params[2]; if(is.na(s0x)) s0x = rnorm(1, -3, 1/5)\n\ts1x = params[3]; if(is.na(s1x)) s1x = -rgamma(1, 1, 10)\n\n\n\t#### p_x\n\n\talpha_rx = rep(params[6], num_libs); if(is.na(params[6])) alpha_rx = rgamma(num_libs, 15, 1)\n\n\n\t### sim_yg\n\n\tymu_i = params[7]; if(is.na(ymu_i)) ymu_i = -rgamma(1, 1, 1)\n\tymu_a1 = params[8]; if(is.na(ymu_a1)) ymu_a1 = 1 + rgamma(1, 1, 1)\n\tymu_a2 = params[9]; if(is.na(ymu_a2)) ymu_a2 = 7 + rgamma(1, 1, 1)\n\n\tyVariance_i =  params[10]; if(is.na(yVariance_i)) yVariance_i = exp(runif(1, log(1), log(3)))\n\tyVariance_a1 =  params[11]; if(is.na(yVariance_a1)) yVariance_a1 = exp(runif(1, log(1), log(3)))\n\tyVariance_a2 =  params[12]; if(is.na(yVariance_a2)) yVariance_a2 = yVariance_a1\n\n\tcat(\"simulation:\", i, \"\\n\")\n\tcat(\"ymu_i:\", round(ymu_i, digits = 5), \" yVariance_i:\", round(yVariance_i, digits = 5), \" spike prob:\", round(spike_prob, digits = 5), \" weight_active:\", round(weight_active, digits = 5))\n\tcat(\" ymu_a1:\", round(ymu_a1, digits = 5), \" yVariance_a1:\", round(yVariance_a1, digits = 5), \" weight_within_active:\", round(weight_within_active, digits = 5))\n\tcat(\" ymu_a2:\", round(ymu_a2, digits = 5), \" yVariance_a2:\", round(yVariance_a2, digits = 5))\n\tcat(\" taux:\", round(taux, digits = 5), \" s0x:\", round(s0x, digits = 5), \" s1x:\", round(s1x, digits = 5), \" alpha_r:\", round(alpha_rx, digits = 5),  \"\\n\")\n\tprint(\"  \")\n\n\n\twrite.table(matrix(c(paste0(\"sim_\", i), round(c(ymu_i, yVariance_i, spike_prob, weight_active, ymu_a1, ymu_a2, yVariance_a1, yVariance_a2, weight_within_active, taux, s0x, s1x, alpha_rx), digits = 3)), nrow = 1),\n\tfile = prior_settings_file, append = TRUE, sep = \"\\t\", quote = F, row.names = FALSE, col.names = FALSE)\n\n\tnum_a1 = round((total - num_inactive) * weight_within_active[1], 0)\n\tnum_a2 = (total - num_inactive) - num_a1\n\n\n\t### simulate Yg\n\tsim_yg = c(rnorm(num_inactive - num_spike, ymu_i, sqrt(yVariance_i)), rnorm(num_a1, ymu_a1, sqrt(yVariance_a1)), rnorm(num_a2, ymu_a2, sqrt(yVariance_a2)))\n\t# sim_yg = c(rnorm(1000, ymu_i-3, sqrt(yVariance_i)*0.75), rnorm(num_inactive - num_spike - 1000, ymu_i, sqrt(yVariance_i)), rnorm(num_a1, ymu_a1, sqrt(yVariance_a1)), rnorm(num_a2, ymu_a2, sqrt(yVariance_a2)))\n\t#\tsim_yg = c(runif(num_inactive - num_spike, ymu_i - 1, ymu_i + 1), runif(num_a1, ymu_a1-3, ymu_a1+3), runif(num_a2, ymu_a2-3, ymu_a2+3))\n\n\t### simulate Xg\n\tsigma_gx <- get_sigma2_g(sim_yg)\n\n\tsim_xg = sapply(1:num_libs, function(x){return(rnorm(length(sim_yg), sim_yg, sqrt(sigma_gx)))})\n\n\t#one lib is an outlier for many genes\n\t#sim_xg[sample(seq(nrow(sim_xg)), 2000, replace = F),1] = rnorm(2000, 4, 2)\n\n\tsapply(1:num_libs, function(lib){\n\n\t  p_x = get_p_x(sim_yg, lib, sim_rel_gl[(num_spike + 1):total])\n\n\t  sim_xg[(runif(length(sim_yg)) < (1 - p_x)), lib] <<- -Inf  #because the in-spike genes will be place at the beginning of sim_xg/yg\n\n\t})\n\t#pdetect depends on Xg not Yg\n\t# sapply(1:num_libs, function(lib){\n\t#\n\t#   p_x = get_p_x(sim_xg[,lib], lib, sim_rel_gl[(num_spike + 1):total])\n\t#\n\t#   sim_xg[(runif(length(sim_yg)) < (1 - p_x)), lib] <<- -Inf  #because the in-spike genes will be place at the beginning of sim_xg/yg\n\t#\n\t#   sim_xg[sim_xg[,lib] < -5 & sim_xg[,lib] > -Inf, lib] <<- -Inf #cutoff\n\t# })\n\n\n\t### simulate spike # first num_spike genes are in spike\n\tsim_xg = as.data.frame(rbind( matrix(rep(rep(-Inf, num_libs),num_spike), nrow=num_spike), sim_xg))\n\n        row.names(sim_xg) = gene_names\n\n\tsim_yg=c( rep(-Inf,num_spike), sim_yg)\n\n\tnactive = num_a1 + num_a2\n\n\tcolnames = c(\"gene_id\", sapply(seq(num_libs), function(x){return(paste(\"lib\", x, sep =\"_\"))}))\n\n\n\twrite.table(cbind(row.names(sim_xg), exp(sim_xg)), file = paste0(\"simulated_data/\", \"sim\", i, \"_\", file_prefix, \"_nactive\", nactive, \".tsv\"),\n\t            quote = F, row.names = FALSE, col.names = colnames, sep=\"\\t\")\n\n  write.table(cbind(row.names(sim_xg), sim_gl), file = paste0(\"simulated_data/\", \"sim\", i, \"_\", file_prefix, \"_gene_length.tsv\"),\n              quote=FALSE, row.names = FALSE, col.names=FALSE, sep = \"\\t\")\n\n\n\twrite.table(cbind(\"gene\", \"Yg\"), file = paste0(\"simulated_data/\", \"sim\", i,\"_Yg.txt\"), row.names = FALSE, col.names = FALSE, sep = \"\\t\", quote = FALSE)\n\n\twrite.table(cbind(gene_names[which(gene_names %in% goi)], sim_yg[which(gene_names %in% goi)]), file = paste0(\"sim\", i,\"_Yg.txt\"), row.names = FALSE,\n\t\tquote = FALSE, append = TRUE, sep = \"\\t\", col.names = FALSE )\n\n\n#\tprint(warnings())\n#\twarnings()\n}\nwarnings()\nprint(warnings())\n",
    "created" : 1561068765277.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1917333914",
    "id" : "57953867",
    "lastKnownWriteTime" : 1562003493,
    "last_content_update" : 1562003493,
    "path" : "C:/Users/ammon_work/Desktop/git_repos/normal_mixture/zigzag/simulate_fromPrior_nmix.cf.r",
    "project_path" : "simulate_fromPrior_nmix.cf.r",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}