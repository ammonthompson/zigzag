{
    "collab_server" : "",
    "contents" : "\n\npath = paste0(Sys.getenv(\"HOMEPATH\"), \"/Google\\ Drive/POSTDOC/PostDoc_research/mixture_model/\",\n              \"DATA_ANALYSIS/gtex/25Lib_lungs_analysis\")\n\nsetwd(path)\n\nlibrary(matrixStats)\nlibopar = par()\n###################################\n### FUNCTIONS #####################\n###################################\nplot_stacks_probs = function(datmatrix, stackprobs, offset = 0.1, text_scale_factor=1.95, num_genes = 10, print_id_probs = TRUE){\n\n\n  #layout(rbind(1,2))\n  logs1tpm = log(datmatrix + exp(-7))\n  num_sample = num_genes\n  #num_sample = 2000\n  rand_genes = sample(seq(nrow(datmatrix)),size = num_sample, replace = F)\n\n  plot(NULL, ylim = c(-3.1,length(rand_genes)+1.5 ), xlim = c(-7.5,9), axes = F, ylab = \"\", xlab = \"log TPM\", cex.lab = 2)\n  sf = text_scale_factor #for example genes\n  #sf = 1.095 #for large num of genes\n  for(i in rev(seq(rand_genes))){\n\n    cm = stackprobs[rand_genes[i]]\n    num_inf = length(which(datmatrix[rand_genes[i],] == -Inf))\n\n    points(logs1tpm[rand_genes[i],], rep(i,ncol(logs1tpm)), pch = 16,\n           col = rgb(cm^0.5, 0, (1 - cm)^0.5, 0.35), cex = sf)\n\n    if(print_id_probs){\n      text(8, i , labels = round(stackprobs[rand_genes[i]], digits = 2), cex = 0.75*sf)\n      text(-4.5, i+0.4 , labels = row.names(logs1tpm)[rand_genes[i]], cex = 0.6*sf)\n    }\n\n  }\n  axis(1)\n\n  stack_offset = offset #for example genes\n  #stack_offset = 8 #for large number of genes\n  for(i in rev(seq(ncol(logs1tpm)))){\n    #remove the -8 values\n    ltpm = logs1tpm[-which(logs1tpm[,i] < -6),i]\n\n    hh = hist(ltpm, breaks = 100, plot = F)\n\n    hh$density = hh$density * length(rand_genes) * 0.75\n\n    polygon(c(hh$mids, hh$mids), c(rep(stack_offset, length(hh$mids)) * (i), hh$density + stack_offset * (i)) - 3.5 - 0.001*num_sample^1.5,\n            col = rgb(1/(1 + 1.1^i), 1/(1 + 1.1^i),1/(1 + 1.1^i)), border = NA)\n\n    lines(hh$mids, hh$density + stack_offset * (i) - 3.5 - 0.001*num_sample^1.5, lwd = 1)\n\n\n  }\n  abline(h=-100)\n  axis(1)\n\n  if(print_id_probs) text(c(-4.5, 7.5), rep(length(rand_genes)+1.5, 2), labels = c(\"Gene ID\", \"P(A|X)\"), cex = 1.05 * sf)\n\n}\n\nadd_stacks_toplots = function(datmatrix1, datmatrix2 = NULL, offset = 0.1, create_plot = FALSE, color_base = 1.1){\n\n  if(create_plot){\n\n    plot(NULL, ylim = c(-3.1,10 ), xlim = c(-7.5,9), axes = F, ylab = \"\", xlab = \"log TPM\", cex.lab = 2)\n\n  }\n\n  logs1tpm = log(datmatrix1 + exp(-7))\n  if(!is.null(datmatrix2)) logs2tpm = log(datmatrix2 + exp(-7))\n\n  stack_offset = offset #for example genes\n  for(i in rev(seq(ncol(logs1tpm)))){\n\n    ccc = 1/(0.25 + color_base^i)\n\n    mycolor = rgb(ccc, ccc, ccc)\n    if(!is.null(datmatrix2)) mycolor = rgb(0, 0, ccc, 1)\n    #remove the -8 values\n    ltpm = logs1tpm[-which(logs1tpm[,i] < -6),i]\n\n    hh = hist(ltpm, breaks = 20, plot = F)\n\n    hh$density = hh$density * 10\n\n    polygon(c(hh$mids, hh$mids), c(rep(stack_offset, length(hh$mids)) * (i), hh$density + stack_offset * (i)) - 3.5 ,\n            col = mycolor, border = NA)\n\n\n    if(!is.null(datmatrix2)){\n\n      mycolor = rgb(ccc,0,0, 1)\n\n      ltpm = logs2tpm[-which(logs2tpm[,i] < -6),i]\n\n      hh2 = hist(ltpm, breaks = 20, plot = F)\n\n      hh2$density = hh2$density * 10\n\n      polygon(c(hh2$mids, hh2$mids), c(rep(stack_offset, length(hh2$mids)) * (i), hh2$density + stack_offset * (i)) - 3.5 ,\n              col = mycolor, border = NA)\n\n      lines(hh2$mids, hh2$density + stack_offset * (i) - 3.5, lwd = 1.5)\n\n\n    }\n\n    lines(hh$mids, hh$density + stack_offset * (i) - 3.5, lwd = 1.5)\n\n\n\n  }\n  abline(h=-100)\n  axis(1)\n\n}\n\ndrawLibraryHistograms = function(histmids, histdensity, bl = 0, sf = 1, rectcolor = rgb(0,0,0,0.5)){\n\n  histdensity = histdensity * sf\n\n  num_polygons = length(histmids)\n\n  binwidth = histmids[2] - histmids[1]\n\n  for(i in 1:num_polygons){\n\n    rect(xleft = histmids[i]-binwidth/2, xright = histmids[i]+binwidth/2, ybottom = bl, ytop = bl + histdensity[i], border = rectcolor, col=rectcolor)\n\n  }\n\n}\n\n###################################\n### Posterior Predictive Analysis #\n###################################\n\nL1_wassMean = read.table(\"post_pred_files/run1_L1_wassMean\", header = T, row.names = 1)\nrums = read.table(\"post_pred_files/run1_rumsfeld\", header = T, row.names = 1)\nL2wass = read.table(\"post_pred_files/run1_L2wass\", header = T, row.names = 1)\n\npdf(file = \"hslungs_25libs_posterior_predictive_boxplots.pdf\", width = 8, height = 8)\nboxplot(cbind(L1_wassMean, rums, L2wass),\n            names = NULL,  border = c(\"black\",\"red\",\"blue\",\"green\"), lwd = 1.5)\nabline(h = 0, lty = 2, lwd = 2)\ndev.off()\n\nfor(i in list(L1_wassMean, L1_meanWass, rums, L2wass)) boxplot(i)\n\n###################################\n### Probability Active Analysis ###\n###################################\n\ns1_1comp = read.table(\"prob_active_files/run1_1comp_25lungs_probability_active.tab\", header = T, row.names = 1)\ns1_2comp= read.table(\"prob_active_files/run1_2comp_25lungs_probability_active.tab\", header = T, row.names = 1)\ns1_3comp= read.table(\"prob_active_files/run1_3comp_25lungs_probability_active.tab\", header = T, row.names = 1)\ns1_4comp= read.table(\"prob_active_files/run1_4comp_25lungs_probability_active.tab\", header = T, row.names = 1)\n\ns1_tpm = read.table(\"expression_files/subfile1_25libs_Lung_RNA.tpm\", header = T, row.names = 1)\n\n### plot show the correlation in probs of model k to model k-1\nplot(rowMeans(s1_1comp), rowMeans(s1_2comp), xlab = \"model k\", ylab = \"model k+1\", col = rgb(0,0,0,0.2))\npoints(rowMeans(s1_2comp), rowMeans(s1_3comp), col = rgb(0,0,1,0.2))\npoints(rowMeans(s1_3comp), rowMeans(s1_4comp), col = rgb(1,0,0,0.2))\nabline(0,1)\npdifs = cbind(abs(rowMeans(s1_2comp) -  rowMeans(s1_1comp)), abs(rowMeans(s1_2comp) -  rowMeans(s1_3comp)),\n              abs(rowMeans(s1_3comp) -  rowMeans(s1_4comp)))\ncolMaxs(pdifs)\nmax(abs(rowMeans(s1_1comp) - rowMeans(s1_4comp)))\nwhich(abs(rowMeans(s1_1comp) - rowMeans(s1_4comp)) == max(abs(rowMeans(s1_1comp) - rowMeans(s1_4comp))))\n\n### plot to show relationships between TPM and prob Active\nplotting_genes_idx = c(which(s1_3comp[,1] < 0.05)[1:2], which(s1_3comp[,1] > 0.05 & s1_3comp[,1] < 0.1)[1:2],\n  which(s1_3comp[,1] > 0.1 & s1_3comp[,1] < 0.2)[1:2], which(s1_3comp[,1] > 0.2 & s1_3comp[,1] < 0.3)[1:2],\n  which(s1_3comp[,1] > 0.3 & s1_3comp[,1] < 0.5)[1:2],\n  which(s1_3comp[,1] > 0.5 & s1_3comp[,1] < 0.6)[1:2], which(s1_3comp[,1] > 0.6 & s1_3comp[,1] < 0.7)[1:2],\n  which(s1_3comp[,1] > 0.7 & s1_3comp[,1] < 0.8)[1:2],which(s1_3comp[,1] > 0.8 & s1_3comp[,1] < 0.95)[1:2],\n  which(s1_3comp[,1] > 0.95 & s1_3comp[,1] < 0.99)[1:2])\nplot(log(s1_tpm[plotting_genes_idx,1]+exp(-5)), s1_3comp[plotting_genes_idx,1],pch =16, cex = 0.75)\nfor(i in seq(ncol(s1_tpm))){\n  points(log(s1_tpm[plotting_genes_idx,i]+exp(-5)), s1_3comp[plotting_genes_idx,1], pch = 16, cex = 0.75,\n         col = rgb(s1_3comp[plotting_genes_idx,1],0,1 - s1_3comp[plotting_genes_idx,1]))\n}\n\n\n###################################################\n#### compare probs to relative to distributions ###\n###################################################\n#NOTE: 19,154 prot coding genes analylzed\npng(filename = \"../ms_figs/probdots_distros_overlay.png\", width = 2400, height = 1800, res = 240)\n\nlayout(matrix(c(1,2), nrow = 1))\nomai = par(\"mai\"); par(\"mai\" = c(0.5, 0.82, 0.5, 0.42))\nplot_stacks_probs(s1_tpm, rowMeans(s1_3comp), offset = 0.12, text_scale_factor = 1.45, num_genes = 5)\nplot_stacks_probs(s1_tpm, rowMeans(s1_3comp), offset = 8, text_scale_factor = 1.35, num_genes = 700, print_id_probs = FALSE)\npar(\"mai\" = omai)\nlayout(1)\n\ndev.off()\n\n#bigger version for poster\npng(filename = \"../../../../presentation_andClasses/CSHL_biology_of_genomes_2019_mtg/lung_density_dots.png\",  width = 2400*6, height = 1800*6, res = 220*6)\n\nlayout(matrix(c(1,2), nrow = 1))\nomai = par(\"mai\"); par(\"mai\" = c(0.5, 0.82, 0.5, 0.42))\nplot_stacks_probs(s1_tpm[,1:25], rowMeans(s1_3comp), offset = 0.12, text_scale_factor = 1.45, num_genes = 5)\nplot_stacks_probs(s1_tpm[,1:15], rowMeans(s1_3comp), offset = 8, text_scale_factor = 1.35, num_genes = 700, print_id_probs = FALSE)\npar(\"mai\" = omai)\nlayout(1)\n\ndev.off()\n\n\n\n#################################################################\n#### Estimate proportions of total gene set transcriptome #######\n#### due to background expression noise                   #######\n#################################################################\n\ntrapz_integration = function(x, y){\n\n  n = length(x)\n  integral = 0.5 * sum((x[2:n] - x[1:(n-1)]) * (y[2:n] + y[1:(n-1)]))\n  return(integral)\n\n}\n\nexpected_pdetect = function(lambda_scalar, glengths_vector, Yg_vector){\n\n  mean_rho = rowMeans(1 - exp(-lambda_scalar * outer(exp(Yg_vector), glengths_vector)))\n\n  return(mean_rho)\n\n}\n\nY = seq(-7,8,by=0.5)\n\nmcmcfile = read.table(\"mcmc_files/run1_subfile1_25libs_Lung_3comps_model_parameters.log\",\n                      header = T, row.names = 1, stringsAsFactors = F)\n\ngene_lengthfile = read.table(\"expression_files/protCoding_GTEx_hg19_meanLength.txt\",\n                             header = F, row.names = 1, stringsAsFactors = F)\nrel_gene_lengths = gene_lengthfile[,1]/mean(gene_lengthfile[,1])\n\nsqrtvar_mcmcfile = mcmcfile\nsqrtvar_mcmcfile[,c(32, 36:38)] = sqrt(sqrtvar_mcmcfile[,c(32, 36:38)])\nmeanPost = as.data.frame(matrix(colMeans(sqrtvar_mcmcfile), nrow = 1))\ncolnames(meanPost) = colnames(mcmcfile)\n\nplot(density(log(s1_tpm[,1])))\nfor(i in 5:29){\n\n  lambda_i = meanPost[,i]\n\n  pdetectY = rowMeans(1-exp(-lambda_i * outer(exp(Y), rel_gene_lengths))) #average over all relative gene lengths\n  yi =  pdetectY * (1 - meanPost$weight_active) * (1 - meanPost$spike_probability) * dnorm(Y, meanPost$inactive_mean, meanPost$inactive_variance)\n  ya = pdetectY *(meanPost$weight_active * (meanPost$weight_within_active_component_1 * dnorm(Y, meanPost$active_mean_component1, meanPost$active_variance_component1) +\n                    meanPost$weight_within_active_component_2 * dnorm(Y, meanPost$active_mean_component2, meanPost$active_variance_component1) +\n                    meanPost$weight_within_active_component_3 * dnorm(Y, meanPost$active_mean_component3, meanPost$active_variance_component1)))\n\n  inactive_total = trapz_integration(Y, exp(Y) * yi)\n  active_total = trapz_integration(Y, exp(Y) * ya)\n\n  prop_inactive = (inactive_total)/(inactive_total + active_total)\n\n  print(prop_inactive)\n\n  lines(density(log(s1_tpm[,i-4])))\n  lines(Y, yi + ya, type = \"l\", col = \"green\", lwd = 2)\n  lines(Y, ya, type = \"l\", col = \"red\", lwd = 2)\n  lines(Y, yi, type = \"l\", col = \"blue\", lwd = 2)\n}\n\n\n",
    "created" : 1554756158262.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2466091542",
    "id" : "5C49179",
    "lastKnownWriteTime" : 1557778018,
    "last_content_update" : 1557778018,
    "path" : "C:/Users/ammon_work/Google Drive/POSTDOC/PostDoc_research/mixture_model/DATA_ANALYSIS/gtex/25Lib_lungs_analysis/lung_25libs_analysis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}