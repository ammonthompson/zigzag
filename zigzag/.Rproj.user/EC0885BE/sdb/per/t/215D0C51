{
    "collab_server" : "",
    "contents" : "---\ntitle: \"zigzag quick start guide\"\nauthor: \"Ammon Thompson\"\ndate: \"July 9, 2019\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n\n## Install zigzag\nNavigate to a directory where you would like to install the zigzag repository that contains the R package, zigzag. \n\n```{bash, eval = FALSE}\nbash\ngit clone xxxx.html\n```\nTo install the R package, open an R terminal or in the console in Rstudio, type: (if your working directory is not where zigzag is, then include the relative or absolute path to zigzag)\n```{r, eval=FALSE}\nR\ninstall.packages(\"zigzag\", type = \"source\", repos = NULL)\nrequire(zigzag)\n```\nNote, zigzag depends on R packages coda and matrixStates.\n\n\n\n### Load Expression and Gene Length Data\nAfter cloning the zigzag repository and instaling the zigzag R package, to use the example data in this tutorial, open R and set the quick_start_guide directory to your working directory.\nWe have provided example data to be used in this tutorial. You can copy-and-paste the R code to run analyses. These are subsets of genes used in the zigzag publication (cation).\n\nThe expression data is found in the quick_start_guide direcotry. These files contain the TPM levels of 5,000 genes estimated in 4 human lung RNA-seq libraries from the GTEx dataset. zigzag requires the data contain row names which are gene names and column names which are the RNA sample labels. Ensure the gene expression level rows corresond with gene length rows.\n\n```{r,}\nexpression_data = read.table(\"example_lung.tpm\", header = T, row.names = 1)\n\nhead(round(expression_data, digits = 1))\n```\n\n```{r,}\nhuman_gene_lengths = read.table(\"example_gene_length.txt\", header = T, row.names = 1)\n\nhead(round(human_gene_lengths, digits = 1))\n```\n\n\n\n\n### Examine transcriptome distribution\nThe model used in zigzag assumes the transcriptome distribution is approximately bimodal and that each sub-distribution is approximately Normal, i.e. symmetrical bell-shaped distributions on the log-scale.\n\nIt is a good idea to check the densities of all libraries to make sure none of the data is anomalous. The vertical lines indicate good boundaries for setting component mean prior thresholds. The thick blue line on the left shows a good upper and lower boundary for the inactive distribution the main active distribution respectively. The thin red line on the right shows the boundary for a possible minor subpopulation of genes with high expression.\n\n```{r, echo=TRUE}\n\nplot(density(log(expression_data[,1])), main =\"\", xlab = \"log Expression\", ylim = c(0, 0.25))\n\nfor(i in seq(ncol(expression_data))) lines(density(log(expression_data[,i])))\n\nabline(v = c(1, 4), lwd = c(2, 1), col = c(\"blue\", \"red\"))\n```\n\n\n\n### Load data and set priors in a zigzag object\nWe will next load the data into a zigzag object that specifies a mixture model that contains two subdistributions in the active expression component with boundaries set at 0 and 4 using the threshold_a flag: threshold_a = c(1, 4).  The upper threshold for the inactive mean prior is by default equal to the threshold_a[1]. All other priors we will keep the default settings. Alternatively, ordered offsets for the means can be specified by only setting one lower threshold for the active compontnents: threshold_a = 1. To see all zigzag variables and default settings including hyperpriors type ?zigzag in the R consol.\n\n```{r, , eval=FALSE}\nmy_zigzag = zigzag$new(data = expression_data, gene_length = human_gene_lengths, \n                       output_directory = \"example_zigzag_output\", \n                       num_active_components = 2, threshold_a = c(1, 4))\n```\nWhen the zigzag object is created, the hyperprior settings will be summarized in the file: example_zigzag_output/hyperparameter_settings.txt\n\n\n\n\n### Run Burnin and assess convergence with log files\nUse the burnin function to run an initial burnin. Here we will run the analysis for 5000 generations sampling every 50 generations of the chain.\nIf write_to_files == TRUE, the burnin sample will, by default, be written to files in a directory called example_zigzag_output/output_burnin...\n\n```{r,, eval = FALSE}\nmy_zigzag$burnin(sample_frequency = 50, progress_plot = TRUE, write_to_files = TRUE, ngen=10000)\n```\n\nevaluate the burnin log files to determine if the chain has converged to the stationary distribution. If satisfied all parameter chains have converged, run the mcmc.\n\n```{r, eval = TRUE, echo = TRUE}\n\nburn = read.table(\"example_zigzag_output/output_burnin/output_model_parameters.log\", header = T, row.names =1)\n```\n\n```{r, eval = FALSE}\n\nfor(i in seq(ncol(burn))) plot(burn[,i], type = \"l\", main = colnames(burn)[i])\n\n```\nFor example, the variable s0 appears to have converged on the stationary distribution around -2:\n\n```{r, echo = TRUE}\nplot(burn[,2], type = \"l\", main = colnames(burn)[2])\n```\n\n\n### Run MCMC\n\nTo sample from the posterior distribution fun the mcmc function.\n\n```{r,, eval = FALSE}\nmy_zigzag$mcmc(sample_frequency = 50, ngen = 50000, mcmcprefix = \"example_lung\")\n```\n\n\n\n### Output files\nMCMC posterior sample files and posterior predictive simulations are located in the directory: example_zigzag_output/example_lung_mcmc_output. \n\nAssess MCMC behavior.\n```{r, eval = TRUE, echo = TRUE}\npost = read.table(\"example_zigzag_output/example_lung_mcmc_output/example_lung_model_parameters.log\", header = T, row.names = 1)\n```\n\nTo plot all parameter mcmc chains:\n```{r, eval = FALSE}\nfor(i in seq(ncol(post))) plot(post[,i], type = \"l\", main = colnames(post)[i])\n\n```\n\nFor example, s0 doesn't appear to shift or drift from a stable distribution around -2:\n```{r, eval = TRUE, echo = TRUE}\n\nplot(post[,2], type = \"l\", main = colnames(post)[2])\n\n```\n\n\n\n\nThe probability each gene in the data is actively expressed is in the file: example_lung_probability_active.tab\n\n```{r,,echo = TRUE}\nPr = read.table(\"example_zigzag_output/example_lung_mcmc_output/example_lung_probability_active.tab\", header = T, row.names = 1)\n\nhead(round(Pr, digits = 2))\n\n```\n\nFinally, you will want to create at least 2 zigzag objects and run two independent MCMC's and confirm they converge on the same stationary distribution for all parameters and produce the same estimates of the probability of active expression for all genes.\n\n",
    "created" : 1562868357945.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2409204278",
    "id" : "215D0C51",
    "lastKnownWriteTime" : 1562957268,
    "last_content_update" : 1562957268729,
    "path" : "C:/Users/ammon_work/Desktop/git_repos/normal_mixture/zigzag/quick_start_guide/zigzag_quickstart.Rmd",
    "project_path" : "quick_start_guide/zigzag_quickstart.Rmd",
    "properties" : {
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}