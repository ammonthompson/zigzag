{
    "collab_server" : "",
    "contents" : "zigzag$methods(\n\n  drawLibraryDensities = function(x, lib, bl = 0, sf = 1, alpha = 1){\n\n    myx = x\n\n    lines(myx, bl + sf * (1 - weight_active) * (1 - spike_probability) * 1/(1 - (1 - weight_active) * spike_probability) *\n            dnorm(myx, mean = inactive_means, sd = sqrt(inactive_variances)),col=rgb(0,0,1,alpha), lwd = 2)\n\n    summed_density <- (1 - weight_active)*(1 - spike_probability)* 1/(1 - (1 - weight_active) * spike_probability) *\n      dnorm(myx, mean = inactive_means, sd = sqrt(inactive_variances))\n\n    for(k in 1:num_active_components){\n\n      lines(myx, bl + weight_active * weight_within_active[k] * 1/(1 - (1 - weight_active) * spike_probability) *\n              dnorm(myx, mean = active_means[k], sd = sqrt(active_variances[k])), col=rgb(1,(1-1/k),0,alpha), lwd = 2)\n\n      summed_density <- summed_density + weight_active*weight_within_active[k] * 1/(1 - (1 - weight_active) * spike_probability) *\n        dnorm(myx, mean = calculate_active_means(active_means_dif)[k], sd=sqrt(active_variances[k]))\n\n    }\n\n    lines(myx, bl + summed_density, col=rgb(0, 1, 0, 0.5 * alpha),lwd = 2)\n\n  },\n\n\n  drawLibraryHistograms = function(histmids, histdensity, bl = 0, sf = 1){\n\n    histdensity = histdensity * sf\n\n    num_polygons = length(histmids)\n\n    binwidth = histmids[2] - histmids[1]\n\n    for(i in 1:num_polygons){\n\n      rect(xleft = histmids[i]-binwidth/2, xright = histmids[i]+binwidth/2, ybottom = bl, ytop = bl + histdensity[i], col=rgb(0,0,0,0.5))\n\n    }\n\n  },\n\n\n  plotHistoDensities = function(xy, plotDensity = TRUE){\n\n    xy <- as.matrix(xy)\n\n    num_libs <- ncol(xy)\n\n    histogram_list = list()\n\n    if(length(out_spike_idx) > 2 ){\n\n      for(lib in seq(num_libs)){\n\n         histogram_list[[lib]] <- hist(xy[out_spike_idx, lib], breaks = 100, plot = FALSE)\n\n      }\n\n      max_heights = unlist(lapply(histogram_list, function(libhist){\n\n        return(max(libhist$density[-1]))\n\n      }))\n\n      # print(max_heights)\n\n      total_height = sum(max_heights) - 0.01 * (num_libs - 1)\n      max_height = max(max_heights)\n\n\n      if(num_libs > 1){\n        baselines = rev((seq(num_libs) - 1) * (total_height - max_height)/(num_libs - 1))\n      }else{\n        baselines = c(0)\n      }\n\n      plot(NULL, xlim=c(-10,10), ylim = c(0, 1.01 * total_height), xlab = \"Y\", ylab = \"density\")\n\n      for(lib in seq(num_libs)){\n\n        .self$drawLibraryHistograms(histogram_list[[lib]]$mids, histogram_list[[lib]]$density, bl = baselines[lib])\n\n        if(plotDensity == TRUE) .self$drawLibraryDensities(histogram_list[[lib]]$mids, lib, bl = baselines[lib])\n\n      }\n\n    }else{\n      hist(exp(Yg))\n    }\n\n  },\n\n\n  plotDensities = function(){\n\n    myx=seq(-10,10,by=0.1)\n\n    plot(myx, weight_active*weight_within_active[1]*dnorm(myx, mean = calculate_active_means(active_means_dif)[1],\n                                                          sd=sqrt(active_variances[[1]][1])), col=\"red\", type=\"l\",ylim=c(0,0.25),ylab=\"density\",xlab=\"log TPM\")\n\n    for(j in 1:num_libraries){\n\n      lines(density(Xg[,j], bw=0.3), xlim=c(min(myx),max(myx)))\n\n      lines(myx, (1 - weight_active)*(1 - spike_probability)*dnorm(myx, mean = inactive_means, sd = sqrt(inactive_variances)),col=\"blue\", lwd=2)\n\n      summed_density <- (1 - weight_active) * (1 - spike_probability) * dnorm(myx, mean = inactive_means, sd = sqrt(inactive_variances))\n\n      for(k in 1:num_active_components){\n\n        lines(myx, weight_active * weight_within_active[k]*dnorm(myx, mean = calculate_active_means(active_means_dif)[k], sd=sqrt(active_variances[k])), col=\"red\", lwd=2)\n\n        summed_density <- summed_density + weight_active * weight_within_active[k]*dnorm(myx, mean = calculate_active_means(active_means_dif)[k], sd=sqrt(active_variances[k]))\n\n      }\n\n      lines(myx, summed_density, col=rgb(0,1,0,0.3),lwd = 2)\n\n    }\n\n  },\n\n\n  plotScatterplots = function(){\n\n    plot(Yg, Yg[[2]], xlim=c(-12,10), ylim=c(-12,10), pch =16, col=rgb(0,0,0,0.3))\n    points(inactive_means,inactive_means[2], pch = 4, lwd =2, col=\"blue\")\n    symbols(inactive_means,inactive_means[2], circles = 1.96 * sqrt(inactive_variances), fg = \"blue\", inches = F, add = T)\n    symbols(inactive_means,inactive_means[2], circles = 1.96 * sqrt(inactive_variances[[2]]), fg = \"blue\", inches = F, add = T)\n\n    am = calculate_active_means(active_means_dif)\n    sapply(1:num_active_components, function(cc){\n      points(am[[1]][cc], am[[2]][cc], pch = 4, lwd =2, col=\"red\")\n      symbols(am[[1]][cc],am[[2]][cc], circles = (1.96 * sqrt(active_variances[[1]][cc])), fg = \"red\", inches = F, add = T)\n      symbols(am[[1]][cc],am[[2]][cc], circles = (1.96 * sqrt(active_variances[[2]][cc])), fg = \"red\", inches = F, add = T)\n    })\n\n\n\n  }\n\n)\n",
    "created" : 1562107516121.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "2|69|24|2|\n",
    "hash" : "345864270",
    "id" : "3D86C445",
    "lastKnownWriteTime" : 1562108311,
    "last_content_update" : 1562108311760,
    "path" : "C:/Users/ammon_work/Desktop/git_repos/normal_mixture/zigzag/R/zigzagPlotting.R",
    "project_path" : "R/zigzagPlotting.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}